[{"/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/index.js":"1","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/App.jsx":"2","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/LegalNotices.jsx":"3","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/Resources.jsx":"4","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/Beaches.jsx":"5","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/Options.jsx":"6","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/Contact.jsx":"7","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/Profile.jsx":"8","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/HeaderMenu.jsx":"9","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/loginsign/HeaderLoginRegister.jsx":"10","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/loginsign/LoginRegister.jsx":"11","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/loginsign/SignInModal.jsx":"12","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/loginsign/LoginModal.jsx":"13"},{"size":202,"mtime":1616017340255,"results":"14","hashOfConfig":"15"},{"size":1964,"mtime":1617056564545,"results":"16","hashOfConfig":"15"},{"size":136,"mtime":1616861057713,"results":"17","hashOfConfig":"15"},{"size":126,"mtime":1616861057714,"results":"18","hashOfConfig":"15"},{"size":120,"mtime":1616869748168,"results":"19","hashOfConfig":"15"},{"size":120,"mtime":1616861057714,"results":"20","hashOfConfig":"15"},{"size":120,"mtime":1616861057713,"results":"21","hashOfConfig":"15"},{"size":120,"mtime":1616861057714,"results":"22","hashOfConfig":"15"},{"size":4023,"mtime":1616869826354,"results":"23","hashOfConfig":"15"},{"size":590,"mtime":1617103967013,"results":"24","hashOfConfig":"15"},{"size":4104,"mtime":1617113717251,"results":"25","hashOfConfig":"15"},{"size":8384,"mtime":1617217466991,"results":"26","hashOfConfig":"15"},{"size":2400,"mtime":1617116439034,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"133peyj",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},"/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/index.js",[],"/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/App.jsx",[],"/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/LegalNotices.jsx",[],"/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/Resources.jsx",[],"/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/Beaches.jsx",[],"/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/Options.jsx",[],"/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/Contact.jsx",[],"/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/Profile.jsx",[],"/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/HeaderMenu.jsx",[],"/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/loginsign/HeaderLoginRegister.jsx",["58","59"],"import React from 'react'\nimport logoSurfBetterHeader from \"../../assets/img/common/logoSurfBetterHeader.png\";\n\n\nconst HeaderLoginRegister = () => {\n\n    return(\n        <header>\n            <img alt=\"SurfBetter logo\" src={logoSurfBetterHeader}/>\n            {/*modals buttons*/}\n            <label htmlFor=\"btn-modal-sign-in\">\n                <a title=\"Sign in the app\">Sign up</a>\n            </label>\n            <label htmlFor={\"btn-modal-log-in\"}>\n                <a title=\"Log in the app\">Log in</a>\n            </label>\n        </header>\n    )\n}\nexport default HeaderLoginRegister\n\n\n","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/loginsign/LoginRegister.jsx",["60","61"],"import  React, {useState, useEffect} from \"react\";\n//img must because import here\nimport slider1 from '../../assets/img/slider/slider1.jpg'\nimport slider2 from '../../assets/img/slider/slider2.jpg'\nimport slider3 from '../../assets/img/slider/slider3.jpg'\n\n//Sign in and Login Modals\nimport SignInModal from \"./SignInModal.jsx\";\nimport LoginModal from \"./LoginModal.jsx\";\n\n/**\n * Load login component\n * @returns {JSX.Element}\n * @constructor\n */\nconst LoginRegister = () => {\n\n    /**\n     * Use state for snackbar state (img being show)\n     */\n    const [slideBarState, setSlideBarState] = useState(1)\n\n    useEffect(() => {\n        showSlide(0)\n    })\n\n    /**\n     * Change slideBar image byh an index\n     * if the state of the slide is less than the number that 1 leaves\n     * the state in the number of divs so that it jumps to the first\n     * if the state of the slide is less than the number that 1 leaves\n     * the state in the number of divs so that it jumps to the first\n     *\n     * Before that set display none or block and set correct index\n     *\n     * @param {number} n : index 1 right, -1 left\n     */\n    const showSlide = (n) => {\n        let index = slideBarState\n        index += n\n        const x = document.getElementsByClassName('slide');\n        // Note: if state of slide is bigger thant slides divs set one\n        index > x.length?index = 1:console.log(\"go one\")\n        // Note: if the state of the slide is less than the number that 1 leaves\n        // the state in the number of divs so that it jumps to the first\n        index < 1?index = x.length:console.log(\"go last\")\n        // Note: Load styles none and block\n        for(let i = 0; i < x.length;i++){\n            x[i].style.display = \"none\";\n        }\n        x[index-1].style.display = \"block\";\n        setSlideBarState(index)\n    }\n\n    return (\n        <main className={\"logSignMain\"}>\n            {/*SlideBar*/}\n            <section className={\"slideBar\"}>\n                <div className={\"slide\"}>\n                    <p>\n                        A tool for the soul<br/>\n                        for any surfer\n                    </p>\n                    <img srcSet={slider1} alt={\"slider first item\"}/>\n                 </div>\n                <div className={\"slide\"}>\n                    <p>\n                        Find the best waves<br/>\n                        of our bay\n                    </p>\n                    <img srcSet={slider2} alt={\"slider second item\"}/>\n                </div>\n                <div className={\"slide\"}>\n                    <p>\n                        Meet, compete and become<br/>\n                        the best surfer in your area\n                    </p>\n                    <img srcSet={slider3} alt={\"slider third item\"}/>\n                </div>\n                {/*syle in line to cover the design point*/}\n                <div className={\"sliderButtons\"}>\n                    <a style={{color: 'black'}} onClick={e => showSlide(-1)}>&#10094;</a>\n                    <a style={{color: 'black'}} onClick={e => showSlide(1)}>&#10095;</a>\n                </div>\n            </section>\n            <section className={\"containMain\"}>\n                <h2>Tired of not having a chance to enjoy your favorite sport?</h2>\n                <p>\n                    We are also SURFERS developers and we have the pleasure of presenting you our service.\n                    Here you will find comprehensive and detailed information about our beaches of our bay.\n                    Being able to know their status in real time, In order to choose the correct\n                    option whenever you want to surf. Click Sign in and configure your profile. <strong>A social network\n                    of beaches is waiting for you !!!</strong>\n                </p>\n            </section>\n            {/*Modal log in by label for on header*/}\n            <input type={\"checkbox\"} id={\"btn-modal-sign-in\"}/>\n            <SignInModal/>\n            <input type={\"checkbox\"} id={\"btn-modal-log-in\"}/>\n            <LoginModal/>\n        </main>\n    )\n}\n\nexport default LoginRegister","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/loginsign/SignInModal.jsx",["62","63","64"],"import React ,{useState} from 'react'\nimport logoSurfBetterHeader from \"../../assets/img/common/logoSurfBetterHeader.png\";\n\nconst SignInModal = () => {\n\n    /*inputs states*/\n    const [name, setName] = useState(\"\")\n    const [error, setError] = useState(\"\")\n    const [surname, setSurname] = useState(\"\")\n    const [nick, setNick] = useState(\"\")\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [repeatPassword, setRepeatPassword] = useState(\"\")\n\n\n    /**\n     * Check if string is correct by checking legth and not numbers\n     * @param cadena\n     * @param min\n     * @param max\n     * @returns {boolean}\n     */\n    const checkStrings = (cadena,min,max) => {\n        let flag = false\n        if (cadena.length > min && cadena.length < max){\n            cadena.split(\"\").forEach(element => {\n                console.log(element);\n                if (!isNaN(element)) {\n                    console.log(\"i have found a number\");\n                    flag = true;\n                }\n            })\n        } else {\n            flag = true\n        }\n        return !flag;\n\n    }\n\n\n    /**\n     * By checking target id check inputs\n     * @param {event} e: input event\n     */\n    const checkInputs = (e) => {\n        debugger;\n        const input = e.target\n        input.classList.remove(\"errors\")\n        const mailReg = new RegExp(/^[-\\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/i);\n\n        if(input.id === \"name\"){\n            if(!name.trim()){\n                input.classList.add(\"errors\");\n                input.placeholder = input.id + \" is empty\";\n\n            } else if (!checkStrings(name, 2, 64)) {\n                input.classList.add(\"errors\");\n                input.value = \"\";\n                input.placeholder = input.id + \" isn't valid\";\n                setName(\"\");\n            }\n        }\n\n        if (input.id === \"surname\") {\n            if (!surname.trim()) {\n                input.classList.add(\"errors\");\n                input.placeholder = input.id + \" is empty\";\n            } else if (!checkStrings(surname, 2, 64)) {\n                input.classList.add(\"errors\");\n                input.value = \"\";\n                input.placeholder = input.id + \" isn't valid\";\n                setSurname(\"\");\n            }\n        }\n\n        if (input.id === \"nick\") {\n            if (!nick.trim()) {\n                input.classList.add(\"errors\");\n                input.value = \"\";\n                input.placeholder = input.id + \" is empty\";\n                setNick(\"\");\n            } else if (!checkStrings(nick, 2, 30)){\n                input.classList.add(\"errors\");\n                input.value = \"\";\n                input.placeholder = input.id + \" isn't valid\";\n                setNick(\"\");\n            }\n        }\n\n        if (input.id === \"email\") {\n            if (!email.trim()) {\n                input.classList.add(\"errors\");\n                input.value = \"\";\n                input.placeholder = input.id + \" is empty\";\n                setEmail(\"\");\n            }\n            else if (email.length > 130 || email.length < 4 || !mailReg.test(email)) {\n                input.classList.add(\"errors\");\n                input.value = \"\";\n                input.placeholder = input.id + \" isn't valid\";\n                setEmail(\"\");\n            }\n        }\n\n        if (input.id === \"password\") {\n            if (!password.trim()) {\n                input.classList.add(\"errors\");\n                input.value = \"\";\n                input.placeholder = input.id + \" is empty\";\n                setPassword(\"\")\n            } else if ( password.length > 64 || password.length < 8){\n                input.classList.add(\"errors\");\n                input.value = \"\";\n                input.placeholder = input.id + \" isn't valid\";\n                setPassword(\"\")\n            }\n        }\n\n        if (input.id === \"re-password\") {\n            if (!repeatPassword.trim()) {\n                input.classList.add(\"errors\");\n                input.value = \"\";\n                input.placeholder = input.id + \" is empty\";\n                setRepeatPassword(\"\")\n            } else if (repeatPassword !== document.getElementById(\"password\").value) {\n                input.classList.add(\"errors\");\n                input.value = \"\";\n                input.placeholder = \"Passwords do not match\";\n                setRepeatPassword(\"\")\n            }\n        }\n\n\n    }\n\n    const signUp = e => {\n        e.preventDefault();\n\n    }\n\n    /**\n     * Change to Log in form\n     */\n    const changeToLogin = () => {\n        document.querySelector('#btn-modal-sign-in').checked = false;\n        document.querySelector('#btn-modal-log-in').checked = true;\n    }\n\n    return (\n        <section className={\"modalSignIn\"}>\n        <div className={\"container\"}>\n            <header>\n                <img srcSet={logoSurfBetterHeader} alt=\"logo SurfBetter\"\n                 title=\"SurfBetter logo\"/>\n                <label htmlFor={\"btn-modal-sign-in\"}>\n                    <a title=\"exit modal\">\n                        <i className={\"fas fa-arrow-left fa-2x\"}></i>\n                    </a>\n                </label>\n            </header>\n\n            <div className={\"contentModal\"}>\n\n                {/*TODO: ROUTE ON FLASK*/}\n                {/*All inputs are checked on js checkinputs()*/}\n                <form id={\"sign-in-form\"} action={'.'} onSubmit={e => signUp(e)} autoComplete={'on'}>\n                    <fieldset className={\"modalInputs\"}>\n                        <legend>Sign in</legend>\n                        <input type={\"text\"} id={\"name\"} name={\"name\"} aria-label={\"name\"}\n                               onChange={e => setName(e.target.value)} onBlur={e => checkInputs(e)}\n                               size={30} title={\"Please input a valid name\"} placeholder={\"User Name *\"} required={true}/>\n\n\n                        <input type={\"text\"} id={\"surname\"} name={\"surname\"} aria-label={\"surname\"}\n                               onChange={e => setSurname(e.target.value)} onBlur={e => checkInputs(e)}\n                               size={30} title={\"Please input a valid surname\"} placeholder={\"User Surname\"} required={true}/>\n\n                        <input type={\"text\"} id={\"nick\"} name={\"nick\"} aria-label={\"nick\"}\n                               onChange={e => setNick(e.target.value)} onBlur={e => checkInputs(e)}\n                               size={30} title={\"Please input a valid nick\"} placeholder={\"User Nick *\"} required={true}/>\n\n                        <input type={\"email\"} id={\"email\"} name={\"email\"} title={\"Please enter a valid email *\"}\n                               onChange={e => setEmail(e.target.value)} onBlur={e => checkInputs(e)}\n                               size={30} aria-label={\"email\"} placeholder={\"Email *\"} required={true}/>\n\n                        <input type={\"password\"} id={\"password\"} name={\"password\"} title={\"Please enter your password\"}\n                               onChange={e => setPassword(e.target.value)} onBlur={e => checkInputs(e)}\n                               aria-label={\"password\"} size={30}  placeholder={\"password *\"} required={true}/>\n\n                        <input type={\"password\"} id={\"re-password\"} name={\"re-password\"} title={\"Please repeat your password\"}\n                               onChange={e => setRepeatPassword(e.target.value)} onBlur={e => checkInputs(e)}\n                               aria-label={\"re-password\"} size={30} placeholder={\"repeat password *\"} required={true}/>\n\n                        <label>\n                            <input type={\"checkbox\"} id={\"check\"} name={\"check\"} required={true}/>\n                            I allow the storage of my data\n                        </label>\n\n                    </fieldset>\n                    <fieldset className={\"modalButtons\"}>\n                        <input type={\"submit\"} className={\"buttonBlue\"} id={\"sign-in-button\"} name={\"sign-in-button\"}\n                               title={\"Sign in\"} value={\"Sign in\"}/>\n\n                        <input type={\"button\"} className={\"buttonBlue\"} id={\"go-to-log-in-button\"} name={\"go-to-log-in-button\"}\n                               title={\"Log in\"} onClick={e => changeToLogin()} value={\"Log in\"}/>\n                    </fieldset>\n\n                </form>\n            </div>\n        </div>\n        </section>\n    )\n}\n\nexport default SignInModal","/Users/antoniojoselojoojeda/Documents/git/surfBetter/surfBetter/src/componnets/loginsign/LoginModal.jsx",["65","66"],"import React ,{useState} from 'react'\nimport logoSurfBetterHeader from \"../../assets/img/common/logoSurfBetterHeader.png\"\n\nconst LoginModal = () => {\n\n    //TODO: useState elements\n    const checkInputs = e => {\n        alert(\"if all correct send to flask\")\n    }\n\n    const changeToSign = () => {\n        document.querySelector('#btn-modal-log-in').checked = false;\n        document.querySelector('#btn-modal-sign-in').checked = true;\n    }\n\n    return (\n        <section className={\"modalLogin\"}>\n            <div className={\"container\"}>\n                <header>\n                    <img srcSet={logoSurfBetterHeader} alt={\"logo SurfBetter\"} title={\"SurfBetter logo\"}/>\n                    <label htmlFor={\"btn-modal-log-in\"}>\n                        <a title=\"exit modal\">\n                            <i className={\"fas fa-arrow-left fa-2x\"}></i>\n                        </a>\n                    </label>\n                </header>\n\n                <div className={\"contentModal\"}>\n\n                    <form id={\"log-in-form\"} action={'.'} onSubmit={e => checkInputs(e)}>\n                        <fieldset className={\"modalInputs\"}>\n                            <legend>Log in</legend>\n\n                            <input type={\"email\"} id={\"email\"} name={\"email\"} title={\"Please enter your email *\"} maxLength={60}\n                                   size={30} aria-label={\"email\"} placeholder={\"Email *\"} required={true}/>\n\n                            <input type={\"password\"} id={\"password\"} name={\"password\"} title={\"Please enter your password\"}\n                                   aria-label={\"password\"} size={30} minLength={8} maxLength={15} placeholder={\"password *\"}\n                                   required={true}/>\n                        </fieldset>\n                        <fieldset className={\"modalButtons\"}>\n                            <input className={\"buttonBlue\"} type={\"submit\"} id={\"log-in-button\"} name={\"log-in-button\"} value={\"Log in\"}\n                                    title={\"Log in\"} />\n\n                            <input className={\"buttonBlue\"} type={\"button\"} id={\"go-to-sign-in-button\"} name={\"go-to-sign-in-button\"}\n                                   value={\"Sign in\"} onClick={e => changeToSign()}/>\n                        </fieldset>\n                    </form>\n                </div>\n            </div>\n        </section>\n\n    )\n}\nexport default LoginModal",{"ruleId":"67","severity":1,"message":"68","line":12,"column":17,"nodeType":"69","endLine":12,"endColumn":44},{"ruleId":"67","severity":1,"message":"68","line":15,"column":17,"nodeType":"69","endLine":15,"endColumn":43},{"ruleId":"67","severity":1,"message":"68","line":82,"column":21,"nodeType":"69","endLine":82,"endColumn":78},{"ruleId":"67","severity":1,"message":"68","line":83,"column":21,"nodeType":"69","endLine":83,"endColumn":77},{"ruleId":"70","severity":1,"message":"71","line":8,"column":12,"nodeType":"72","messageId":"73","endLine":8,"endColumn":17},{"ruleId":"70","severity":1,"message":"74","line":8,"column":19,"nodeType":"72","messageId":"73","endLine":8,"endColumn":27},{"ruleId":"67","severity":1,"message":"68","line":156,"column":21,"nodeType":"69","endLine":156,"endColumn":43},{"ruleId":"70","severity":1,"message":"75","line":1,"column":16,"nodeType":"72","messageId":"73","endLine":1,"endColumn":24},{"ruleId":"67","severity":1,"message":"68","line":22,"column":25,"nodeType":"69","endLine":22,"endColumn":47},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'setError' is assigned a value but never used.","'useState' is defined but never used."]